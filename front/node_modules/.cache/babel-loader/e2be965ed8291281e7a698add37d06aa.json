{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { states as recorderStates } from './constants/recorder';\nconst {\n  RECORDING,\n  RESUMING,\n  PAUSED,\n  INACTIVE\n} = recorderStates;\n\nconst useRecorder = () => {\n  _s();\n\n  const [recordings, setRecording] = useState([]);\n  const [recorderState, setRecorderState] = useState('');\n  const [recorder, setRecorder] = useState(null);\n  const [stream, setStream] = useState();\n\n  function requestRecorder() {\n    return navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n  }\n\n  const updateRecorderState = () => {\n    const stopAllTracks = () => {\n      recorder.stop();\n      stream.getTracks()[0].stop();\n      console.log(recorder);\n    };\n\n    const recorderActions = {\n      inactive: () => stopAllTracks(),\n      paused: () => recorder.pause(),\n      recording: () => recorder.start(),\n      resuming: () => recorder.resume()\n    };\n    recorderActions[recorderState]();\n  };\n\n  const startRecording = () => {\n    setRecorderState(RECORDING);\n  };\n\n  const resumeRecording = () => {\n    setRecorderState(RESUMING);\n  };\n\n  const pauseRecording = () => {\n    setRecorderState(PAUSED);\n  };\n\n  const stopRecording = () => {\n    setRecorderState(INACTIVE);\n  };\n\n  useEffect(() => {\n    if (recorder === null) {\n      if (recorderState === RECORDING) {\n        requestRecorder().then(newStream => {\n          setStream(newStream);\n          setRecorder(new MediaRecorder(newStream));\n        }, console.error);\n      }\n\n      return;\n    }\n\n    updateRecorderState();\n\n    const handleData = e => {\n      const newRecording = URL.createObjectURL(e.data);\n      setRecording([...recordings, newRecording]);\n    };\n\n    recorder.addEventListener('dataavailable', handleData);\n    return () => recorder.removeEventListener('dataavailable', handleData);\n  }, [recorder, recorderState]);\n  return [recordings, recorderState, startRecording, pauseRecording, resumeRecording, stopRecording];\n};\n\n_s(useRecorder, \"EiOs5NXI1k+jmtxpOvvPDosQ9H4=\");\n\nexport default useRecorder;","map":{"version":3,"sources":["/Users/gmore/Sites/blablabla/src/useRecorder.js"],"names":["useEffect","useState","states","recorderStates","RECORDING","RESUMING","PAUSED","INACTIVE","useRecorder","recordings","setRecording","recorderState","setRecorderState","recorder","setRecorder","stream","setStream","requestRecorder","navigator","mediaDevices","getUserMedia","audio","updateRecorderState","stopAllTracks","stop","getTracks","console","log","recorderActions","inactive","paused","pause","recording","start","resuming","resume","startRecording","resumeRecording","pauseRecording","stopRecording","then","newStream","MediaRecorder","error","handleData","e","newRecording","URL","createObjectURL","data","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,MAAM,IAAIC,cAAnB,QAAyC,sBAAzC;AAEA,MAAM;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,QAAb;AAAuBC,EAAAA,MAAvB;AAA+BC,EAAAA;AAA/B,IAA4CJ,cAAlD;;AAEA,MAAMK,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,UAAD,EAAaC,YAAb,IAA6BT,QAAQ,CAAC,EAAD,CAA3C;AACA,QAAM,CAACU,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACc,MAAD,EAASC,SAAT,IAAsBf,QAAQ,EAApC;;AAEA,WAASgB,eAAT,GAA2B;AACzB,WAAOC,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAApC,CAAP;AACD;;AAED,QAAMC,mBAAmB,GAAG,MAAM;AAChC,UAAMC,aAAa,GAAG,MAAM;AAC1BV,MAAAA,QAAQ,CAACW,IAAT;AAEAT,MAAAA,MAAM,CAACU,SAAP,GAAmB,CAAnB,EAAsBD,IAAtB;AAEAE,MAAAA,OAAO,CAACC,GAAR,CAAYd,QAAZ;AACD,KAND;;AAOA,UAAMe,eAAe,GAAG;AACtBC,MAAAA,QAAQ,EAAE,MAAMN,aAAa,EADP;AAEtBO,MAAAA,MAAM,EAAE,MAAMjB,QAAQ,CAACkB,KAAT,EAFQ;AAGtBC,MAAAA,SAAS,EAAE,MAAMnB,QAAQ,CAACoB,KAAT,EAHK;AAItBC,MAAAA,QAAQ,EAAE,MAAMrB,QAAQ,CAACsB,MAAT;AAJM,KAAxB;AAMAP,IAAAA,eAAe,CAACjB,aAAD,CAAf;AACD,GAfD;;AAiBA,QAAMyB,cAAc,GAAG,MAAM;AAC3BxB,IAAAA,gBAAgB,CAACR,SAAD,CAAhB;AACD,GAFD;;AAIA,QAAMiC,eAAe,GAAG,MAAM;AAC5BzB,IAAAA,gBAAgB,CAACP,QAAD,CAAhB;AACD,GAFD;;AAIA,QAAMiC,cAAc,GAAG,MAAM;AAC3B1B,IAAAA,gBAAgB,CAACN,MAAD,CAAhB;AACD,GAFD;;AAIA,QAAMiC,aAAa,GAAG,MAAM;AAC1B3B,IAAAA,gBAAgB,CAACL,QAAD,CAAhB;AACD,GAFD;;AAIAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,QAAQ,KAAK,IAAjB,EAAuB;AACrB,UAAIF,aAAa,KAAKP,SAAtB,EAAiC;AAC/Ba,QAAAA,eAAe,GAAGuB,IAAlB,CAAuBC,SAAS,IAAI;AAClCzB,UAAAA,SAAS,CAACyB,SAAD,CAAT;AACA3B,UAAAA,WAAW,CAAC,IAAI4B,aAAJ,CAAkBD,SAAlB,CAAD,CAAX;AACD,SAHD,EAGGf,OAAO,CAACiB,KAHX;AAID;;AACD;AACD;;AAEDrB,IAAAA,mBAAmB;;AAEnB,UAAMsB,UAAU,GAAGC,CAAC,IAAI;AACtB,YAAMC,YAAY,GAAGC,GAAG,CAACC,eAAJ,CAAoBH,CAAC,CAACI,IAAtB,CAArB;AAEAvC,MAAAA,YAAY,CAAC,CAAC,GAAGD,UAAJ,EAAgBqC,YAAhB,CAAD,CAAZ;AACD,KAJD;;AAMAjC,IAAAA,QAAQ,CAACqC,gBAAT,CAA0B,eAA1B,EAA2CN,UAA3C;AAEA,WAAO,MAAM/B,QAAQ,CAACsC,mBAAT,CAA6B,eAA7B,EAA8CP,UAA9C,CAAb;AACD,GAtBQ,EAsBN,CAAC/B,QAAD,EAAWF,aAAX,CAtBM,CAAT;AAwBA,SAAO,CACLF,UADK,EAELE,aAFK,EAGLyB,cAHK,EAILE,cAJK,EAKLD,eALK,EAMLE,aANK,CAAP;AAQD,CA3ED;;GAAM/B,W;;AA6EN,eAAeA,WAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport { states as recorderStates } from './constants/recorder';\n\nconst { RECORDING, RESUMING, PAUSED, INACTIVE } = recorderStates;\n\nconst useRecorder = () => {\n  const [recordings, setRecording] = useState([]);\n  const [recorderState, setRecorderState] = useState('');\n  const [recorder, setRecorder] = useState(null);\n  const [stream, setStream] = useState();\n\n  function requestRecorder() {\n    return navigator.mediaDevices.getUserMedia({ audio: true });\n  }\n\n  const updateRecorderState = () => {\n    const stopAllTracks = () => {\n      recorder.stop();\n\n      stream.getTracks()[0].stop();\n\n      console.log(recorder);\n    };\n    const recorderActions = {\n      inactive: () => stopAllTracks(),\n      paused: () => recorder.pause(),\n      recording: () => recorder.start(),\n      resuming: () => recorder.resume()\n    };\n    recorderActions[recorderState]();\n  };\n\n  const startRecording = () => {\n    setRecorderState(RECORDING);\n  };\n\n  const resumeRecording = () => {\n    setRecorderState(RESUMING);\n  };\n\n  const pauseRecording = () => {\n    setRecorderState(PAUSED);\n  };\n\n  const stopRecording = () => {\n    setRecorderState(INACTIVE);\n  };\n\n  useEffect(() => {\n    if (recorder === null) {\n      if (recorderState === RECORDING) {\n        requestRecorder().then(newStream => {\n          setStream(newStream)\n          setRecorder(new MediaRecorder(newStream));\n        }, console.error);\n      }\n      return;\n    }\n\n    updateRecorderState();\n\n    const handleData = e => {\n      const newRecording = URL.createObjectURL(e.data);\n\n      setRecording([...recordings, newRecording]);\n    };\n\n    recorder.addEventListener('dataavailable', handleData);\n\n    return () => recorder.removeEventListener('dataavailable', handleData);\n  }, [recorder, recorderState]);\n\n  return [\n    recordings,\n    recorderState,\n    startRecording,\n    pauseRecording,\n    resumeRecording,\n    stopRecording\n  ];\n};\n\nexport default useRecorder;\n"]},"metadata":{},"sourceType":"module"}