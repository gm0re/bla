{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { states as recorderStates } from './constants/recorder';\n\nconst useRecorder = () => {\n  _s();\n\n  const [recordings, setRecording] = useState([]);\n  const [recorderState, setRecorderState] = useState('');\n  const [recorder, setRecorder] = useState(null);\n\n  const updateRecorderState = () => {\n    const recorderActions = {\n      inactive: () => recorder.stop(),\n      paused: () => recorder.pause(),\n      recording: () => recorder.start(),\n      resuming: () => recorder.resume()\n    };\n    recorderActions[recorderState]();\n  };\n\n  const startRecording = () => {\n    setRecorderState(recorderStates.RECORDING);\n  };\n\n  const resumeRecording = () => {\n    setRecorderState(recorderStates.RESUMING);\n  };\n\n  const pauseRecording = () => {\n    setRecorderState(recorderStates.PAUSED);\n  };\n\n  const stopRecording = () => {\n    setRecorderState(recorderStates.INACTIVE);\n  };\n\n  useEffect(() => {\n    if (recorder === null) {\n      if (recorderState === recorderStates.RECORDING) {\n        requestRecorder().then(setRecorder, console.error);\n      }\n\n      return;\n    }\n\n    updateRecorderState();\n\n    const handleData = e => {\n      const newRecording = URL.createObjectURL(e.data);\n      setRecording([...recordings, newRecording]);\n    };\n\n    recorder.addEventListener(\"dataavailable\", handleData);\n    return () => recorder.removeEventListener(\"dataavailable\", handleData);\n  }, [recorder, recorderState]);\n  return [recordings, recorderState, startRecording, pauseRecording, resumeRecording, stopRecording];\n};\n\n_s(useRecorder, \"0eMpxzXIqx0ON3wjzHMR1u1AOfg=\");\n\nasync function requestRecorder() {\n  const stream = await navigator.mediaDevices.getUserMedia({\n    audio: true\n  });\n  return new MediaRecorder(stream);\n}\n\nexport default useRecorder;","map":{"version":3,"sources":["/Users/gmore/Sites/blablabla/src/useRecorder.js"],"names":["useEffect","useState","states","recorderStates","useRecorder","recordings","setRecording","recorderState","setRecorderState","recorder","setRecorder","updateRecorderState","recorderActions","inactive","stop","paused","pause","recording","start","resuming","resume","startRecording","RECORDING","resumeRecording","RESUMING","pauseRecording","PAUSED","stopRecording","INACTIVE","requestRecorder","then","console","error","handleData","e","newRecording","URL","createObjectURL","data","addEventListener","removeEventListener","stream","navigator","mediaDevices","getUserMedia","audio","MediaRecorder"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,MAAM,IAAIC,cAAnB,QAAyC,sBAAzC;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,UAAD,EAAaC,YAAb,IAA6BL,QAAQ,CAAC,EAAD,CAA3C;AACA,QAAM,CAACM,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,IAAD,CAAxC;;AAEA,QAAMU,mBAAmB,GAAG,MAAM;AAChC,UAAMC,eAAe,GAAG;AACtBC,MAAAA,QAAQ,EAAE,MAAMJ,QAAQ,CAACK,IAAT,EADM;AAEtBC,MAAAA,MAAM,EAAE,MAAMN,QAAQ,CAACO,KAAT,EAFQ;AAGtBC,MAAAA,SAAS,EAAE,MAAMR,QAAQ,CAACS,KAAT,EAHK;AAItBC,MAAAA,QAAQ,EAAE,MAAMV,QAAQ,CAACW,MAAT;AAJM,KAAxB;AAMAR,IAAAA,eAAe,CAACL,aAAD,CAAf;AACD,GARD;;AAUA,QAAMc,cAAc,GAAG,MAAM;AAC3Bb,IAAAA,gBAAgB,CAACL,cAAc,CAACmB,SAAhB,CAAhB;AACD,GAFD;;AAIA,QAAMC,eAAe,GAAG,MAAM;AAC5Bf,IAAAA,gBAAgB,CAACL,cAAc,CAACqB,QAAhB,CAAhB;AACD,GAFD;;AAIA,QAAMC,cAAc,GAAG,MAAM;AAC3BjB,IAAAA,gBAAgB,CAACL,cAAc,CAACuB,MAAhB,CAAhB;AACD,GAFD;;AAIA,QAAMC,aAAa,GAAG,MAAM;AAC1BnB,IAAAA,gBAAgB,CAACL,cAAc,CAACyB,QAAhB,CAAhB;AACD,GAFD;;AAIA5B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,QAAQ,KAAK,IAAjB,EAAuB;AACrB,UAAIF,aAAa,KAAKJ,cAAc,CAACmB,SAArC,EAAgD;AAC9CO,QAAAA,eAAe,GAAGC,IAAlB,CAAuBpB,WAAvB,EAAoCqB,OAAO,CAACC,KAA5C;AACD;;AACD;AACD;;AAEDrB,IAAAA,mBAAmB;;AAEnB,UAAMsB,UAAU,GAAGC,CAAC,IAAI;AACtB,YAAMC,YAAY,GAAGC,GAAG,CAACC,eAAJ,CAAoBH,CAAC,CAACI,IAAtB,CAArB;AAEAhC,MAAAA,YAAY,CAAC,CAAC,GAAGD,UAAJ,EAAgB8B,YAAhB,CAAD,CAAZ;AACD,KAJD;;AAMA1B,IAAAA,QAAQ,CAAC8B,gBAAT,CAA0B,eAA1B,EAA2CN,UAA3C;AAEA,WAAO,MAAMxB,QAAQ,CAAC+B,mBAAT,CAA6B,eAA7B,EAA8CP,UAA9C,CAAb;AACD,GAnBQ,EAmBN,CAACxB,QAAD,EAAWF,aAAX,CAnBM,CAAT;AAqBA,SAAO,CACLF,UADK,EAELE,aAFK,EAGLc,cAHK,EAILI,cAJK,EAKLF,eALK,EAMLI,aANK,CAAP;AAQD,CA5DD;;GAAMvB,W;;AA8DN,eAAeyB,eAAf,GAAiC;AAC/B,QAAMY,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAApC,CAArB;AACA,SAAO,IAAIC,aAAJ,CAAkBL,MAAlB,CAAP;AACD;;AAED,eAAerC,WAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { states as recorderStates } from './constants/recorder';\n\nconst useRecorder = () => {\n  const [recordings, setRecording] = useState([]);\n  const [recorderState, setRecorderState] = useState('');\n  const [recorder, setRecorder] = useState(null);\n\n  const updateRecorderState = () => {\n    const recorderActions = {\n      inactive: () => recorder.stop(),\n      paused: () => recorder.pause(),\n      recording: () => recorder.start(),\n      resuming: () => recorder.resume()\n    };\n    recorderActions[recorderState]();\n  };\n\n  const startRecording = () => {\n    setRecorderState(recorderStates.RECORDING);\n  };\n\n  const resumeRecording = () => {\n    setRecorderState(recorderStates.RESUMING);\n  };\n\n  const pauseRecording = () => {\n    setRecorderState(recorderStates.PAUSED);\n  };\n\n  const stopRecording = () => {\n    setRecorderState(recorderStates.INACTIVE);\n  };\n\n  useEffect(() => {\n    if (recorder === null) {\n      if (recorderState === recorderStates.RECORDING) {\n        requestRecorder().then(setRecorder, console.error);\n      }\n      return;\n    }\n\n    updateRecorderState();\n\n    const handleData = e => {\n      const newRecording = URL.createObjectURL(e.data);\n\n      setRecording([...recordings, newRecording]);\n    };\n\n    recorder.addEventListener(\"dataavailable\", handleData);\n\n    return () => recorder.removeEventListener(\"dataavailable\", handleData);\n  }, [recorder, recorderState]);\n\n  return [\n    recordings,\n    recorderState,\n    startRecording,\n    pauseRecording,\n    resumeRecording,\n    stopRecording\n  ];\n};\n\nasync function requestRecorder() {\n  const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n  return new MediaRecorder(stream);\n}\n\nexport default useRecorder;\n"]},"metadata":{},"sourceType":"module"}