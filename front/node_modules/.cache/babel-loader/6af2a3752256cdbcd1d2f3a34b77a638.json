{"ast":null,"code":"'use strict';\n/**\n * Font RegExp helpers.\n */\n\nconst weights = 'bold|bolder|lighter|[1-9]00',\n      styles = 'italic|oblique',\n      variants = 'small-caps',\n      stretches = 'ultra-condensed|extra-condensed|condensed|semi-condensed|semi-expanded|expanded|extra-expanded|ultra-expanded',\n      units = 'px|pt|pc|in|cm|mm|%|em|ex|ch|rem|q',\n      string = '\\'([^\\']+)\\'|\"([^\"]+)\"|[\\\\w\\\\s-]+'; // [ [ <‘font-style’> || <font-variant-css21> || <‘font-weight’> || <‘font-stretch’> ]?\n//    <‘font-size’> [ / <‘line-height’> ]? <‘font-family’> ]\n// https://drafts.csswg.org/css-fonts-3/#font-prop\n\nconst weightRe = new RegExp('(' + weights + ') +', 'i');\nconst styleRe = new RegExp('(' + styles + ') +', 'i');\nconst variantRe = new RegExp('(' + variants + ') +', 'i');\nconst stretchRe = new RegExp('(' + stretches + ') +', 'i');\nconst sizeFamilyRe = new RegExp('([\\\\d\\\\.]+)(' + units + ') *' + '((?:' + string + ')( *, *(?:' + string + '))*)');\n/**\n * Cache font parsing.\n */\n\nconst cache = {};\nconst defaultHeight = 16; // pt, common browser default\n\n/**\n * Parse font `str`.\n *\n * @param {String} str\n * @return {Object} Parsed font. `size` is in device units. `unit` is the unit\n *   appearing in the input string.\n * @api private\n */\n\nmodule.exports = function (str) {\n  // Cached\n  if (cache[str]) return cache[str]; // Try for required properties first.\n\n  const sizeFamily = sizeFamilyRe.exec(str);\n  if (!sizeFamily) return; // invalid\n  // Default values and required properties\n\n  const font = {\n    weight: 'normal',\n    style: 'normal',\n    stretch: 'normal',\n    variant: 'normal',\n    size: parseFloat(sizeFamily[1]),\n    unit: sizeFamily[2],\n    family: sizeFamily[3].replace(/[\"']/g, '').replace(/ *, */g, ',')\n  }; // Optional, unordered properties.\n\n  let weight, style, variant, stretch; // Stop search at `sizeFamily.index`\n\n  let substr = str.substring(0, sizeFamily.index);\n  if (weight = weightRe.exec(substr)) font.weight = weight[1];\n  if (style = styleRe.exec(substr)) font.style = style[1];\n  if (variant = variantRe.exec(substr)) font.variant = variant[1];\n  if (stretch = stretchRe.exec(substr)) font.stretch = stretch[1]; // Convert to device units. (`font.unit` is the original unit)\n  // TODO: ch, ex\n\n  switch (font.unit) {\n    case 'pt':\n      font.size /= 0.75;\n      break;\n\n    case 'pc':\n      font.size *= 16;\n      break;\n\n    case 'in':\n      font.size *= 96;\n      break;\n\n    case 'cm':\n      font.size *= 96.0 / 2.54;\n      break;\n\n    case 'mm':\n      font.size *= 96.0 / 25.4;\n      break;\n\n    case '%':\n      // TODO disabled because existing unit tests assume 100\n      // font.size *= defaultHeight / 100 / 0.75\n      break;\n\n    case 'em':\n    case 'rem':\n      font.size *= defaultHeight / 0.75;\n      break;\n\n    case 'q':\n      font.size *= 96 / 25.4 / 4;\n      break;\n  }\n\n  return cache[str] = font;\n};","map":{"version":3,"sources":["/Users/gmore/Sites/blablabla/node_modules/canvas/lib/parse-font.js"],"names":["weights","styles","variants","stretches","units","string","weightRe","RegExp","styleRe","variantRe","stretchRe","sizeFamilyRe","cache","defaultHeight","module","exports","str","sizeFamily","exec","font","weight","style","stretch","variant","size","parseFloat","unit","family","replace","substr","substring","index"],"mappings":"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","sourcesContent":["'use strict'\n\n/**\n * Font RegExp helpers.\n */\n\nconst weights = 'bold|bolder|lighter|[1-9]00'\n  , styles = 'italic|oblique'\n  , variants = 'small-caps'\n  , stretches = 'ultra-condensed|extra-condensed|condensed|semi-condensed|semi-expanded|expanded|extra-expanded|ultra-expanded'\n  , units = 'px|pt|pc|in|cm|mm|%|em|ex|ch|rem|q'\n  , string = '\\'([^\\']+)\\'|\"([^\"]+)\"|[\\\\w\\\\s-]+'\n\n// [ [ <‘font-style’> || <font-variant-css21> || <‘font-weight’> || <‘font-stretch’> ]?\n//    <‘font-size’> [ / <‘line-height’> ]? <‘font-family’> ]\n// https://drafts.csswg.org/css-fonts-3/#font-prop\nconst weightRe = new RegExp('(' + weights + ') +', 'i')\nconst styleRe = new RegExp('(' + styles + ') +', 'i')\nconst variantRe = new RegExp('(' + variants + ') +', 'i')\nconst stretchRe = new RegExp('(' + stretches + ') +', 'i')\nconst sizeFamilyRe = new RegExp(\n  '([\\\\d\\\\.]+)(' + units + ') *'\n  + '((?:' + string + ')( *, *(?:' + string + '))*)')\n\n/**\n * Cache font parsing.\n */\n\nconst cache = {}\n\nconst defaultHeight = 16 // pt, common browser default\n\n/**\n * Parse font `str`.\n *\n * @param {String} str\n * @return {Object} Parsed font. `size` is in device units. `unit` is the unit\n *   appearing in the input string.\n * @api private\n */\n\nmodule.exports = function (str) {\n  // Cached\n  if (cache[str]) return cache[str]\n\n  // Try for required properties first.\n  const sizeFamily = sizeFamilyRe.exec(str)\n  if (!sizeFamily) return // invalid\n\n  // Default values and required properties\n  const font = {\n    weight: 'normal',\n    style: 'normal',\n    stretch: 'normal',\n    variant: 'normal',\n    size: parseFloat(sizeFamily[1]),\n    unit: sizeFamily[2],\n    family: sizeFamily[3].replace(/[\"']/g, '').replace(/ *, */g, ',')\n  }\n\n  // Optional, unordered properties.\n  let weight, style, variant, stretch\n  // Stop search at `sizeFamily.index`\n  let substr = str.substring(0, sizeFamily.index)\n  if ((weight = weightRe.exec(substr))) font.weight = weight[1]\n  if ((style = styleRe.exec(substr))) font.style = style[1]\n  if ((variant = variantRe.exec(substr))) font.variant = variant[1]\n  if ((stretch = stretchRe.exec(substr))) font.stretch = stretch[1]\n\n  // Convert to device units. (`font.unit` is the original unit)\n  // TODO: ch, ex\n  switch (font.unit) {\n    case 'pt':\n      font.size /= 0.75\n      break\n    case 'pc':\n      font.size *= 16\n      break\n    case 'in':\n      font.size *= 96\n      break\n    case 'cm':\n      font.size *= 96.0 / 2.54\n      break\n    case 'mm':\n      font.size *= 96.0 / 25.4\n      break\n    case '%':\n      // TODO disabled because existing unit tests assume 100\n      // font.size *= defaultHeight / 100 / 0.75\n      break\n    case 'em':\n    case 'rem':\n      font.size *= defaultHeight / 0.75\n      break\n    case 'q':\n      font.size *= 96 / 25.4 / 4\n      break\n  }\n\n  return (cache[str] = font)\n}\n"]},"metadata":{},"sourceType":"script"}